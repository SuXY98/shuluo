////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework.vf
// /___/   /\     Timestamp : 01/07/2019 22:55:56
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath E:/Framework/ipcore_dir -intstyle ise -family kintex7 -verilog E:/Framework/Framework.vf -w E:/Framework/Framework.sch
//Design Name: Framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MC14495_MUSER_Framework(D0, 
                               D1, 
                               D2, 
                               D3, 
                               LE, 
                               point, 
                               a, 
                               b, 
                               c, 
                               d, 
                               e, 
                               f, 
                               g, 
                               P);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output P;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_42;
   wire XLXN_142;
   wire XLXN_145;
   wire XLXN_148;
   wire XLXN_161;
   
   AND4  A_0 (.I0(XLXN_42), 
             .I1(XLXN_142), 
             .I2(D2), 
             .I3(D3), 
             .O(XLXN_7));
   AND4  A_1 (.I0(D0), 
             .I1(D1), 
             .I2(D2), 
             .I3(XLXN_148), 
             .O(XLXN_8));
   AND3  A_2 (.I0(XLXN_142), 
             .I1(XLXN_145), 
             .I2(XLXN_148), 
             .O(XLXN_9));
   AND3  A_3 (.I0(D0), 
             .I1(D1), 
             .I2(XLXN_148), 
             .O(XLXN_10));
   AND3  A_4 (.I0(D1), 
             .I1(XLXN_145), 
             .I2(XLXN_148), 
             .O(XLXN_11));
   AND3  A_5 (.I0(D0), 
             .I1(XLXN_145), 
             .I2(XLXN_148), 
             .O(XLXN_12));
   AND3  A_6 (.I0(D0), 
             .I1(XLXN_142), 
             .I2(XLXN_145), 
             .O(XLXN_13));
   AND3  A_7 (.I0(XLXN_142), 
             .I1(D2), 
             .I2(XLXN_148), 
             .O(XLXN_14));
   AND2  A_8 (.I0(D0), 
             .I1(XLXN_148), 
             .O(XLXN_15));
   AND4  A_9 (.I0(XLXN_42), 
             .I1(D1), 
             .I2(XLXN_145), 
             .I3(D3), 
             .O(XLXN_16));
   AND3  A_10 (.I0(D0), 
              .I1(D1), 
              .I2(D2), 
              .O(XLXN_17));
   AND3  A_11 (.I0(D1), 
              .I1(D2), 
              .I2(D3), 
              .O(XLXN_18));
   AND4  A_12 (.I0(XLXN_42), 
              .I1(D1), 
              .I2(XLXN_145), 
              .I3(XLXN_148), 
              .O(XLXN_19));
   AND3  A_13 (.I0(D0), 
              .I1(D1), 
              .I2(D3), 
              .O(XLXN_20));
   AND3  A_14 (.I0(XLXN_42), 
              .I1(D2), 
              .I2(D3), 
              .O(XLXN_22));
   AND3  A_15 (.I0(XLXN_42), 
              .I1(D1), 
              .I2(D2), 
              .O(XLXN_23));
   AND4  A_16 (.I0(D0), 
              .I1(XLXN_142), 
              .I2(D2), 
              .I3(XLXN_148), 
              .O(XLXN_24));
   AND4  A_17 (.I0(D0), 
              .I1(D1), 
              .I2(XLXN_145), 
              .I3(D3), 
              .O(XLXN_25));
   AND4  A_18 (.I0(D0), 
              .I1(XLXN_142), 
              .I2(D2), 
              .I3(D3), 
              .O(XLXN_35));
   AND4  A_19 (.I0(XLXN_42), 
              .I1(XLXN_142), 
              .I2(D2), 
              .I3(XLXN_148), 
              .O(XLXN_36));
   AND4  A_20 (.I0(D0), 
              .I1(XLXN_145), 
              .I2(XLXN_142), 
              .I3(XLXN_148), 
              .O(XLXN_28));
   OR4  XLXI_55 (.I0(XLXN_25), 
                .I1(XLXN_35), 
                .I2(XLXN_36), 
                .I3(XLXN_28), 
                .O(XLXN_29));
   OR4  XLXI_61 (.I0(XLXN_20), 
                .I1(XLXN_22), 
                .I2(XLXN_23), 
                .I3(XLXN_24), 
                .O(XLXN_30));
   OR4  XLXI_62 (.I0(XLXN_10), 
                .I1(XLXN_11), 
                .I2(XLXN_12), 
                .I3(XLXN_35), 
                .O(XLXN_34));
   OR3  XLXI_63 (.I0(XLXN_7), 
                .I1(XLXN_8), 
                .I2(XLXN_9), 
                .O(XLXN_161));
   OR3  XLXI_64 (.I0(XLXN_13), 
                .I1(XLXN_14), 
                .I2(XLXN_15), 
                .O(XLXN_33));
   OR4  XLXI_65 (.I0(XLXN_16), 
                .I1(XLXN_17), 
                .I2(XLXN_36), 
                .I3(XLXN_28), 
                .O(XLXN_32));
   OR3  XLXI_66 (.I0(XLXN_18), 
                .I1(XLXN_19), 
                .I2(XLXN_22), 
                .O(XLXN_31));
   OR2  XLXI_67 (.I0(LE), 
                .I1(XLXN_161), 
                .O(g));
   OR2  XLXI_68 (.I0(LE), 
                .I1(XLXN_34), 
                .O(f));
   OR2  XLXI_69 (.I0(LE), 
                .I1(XLXN_33), 
                .O(e));
   OR2  XLXI_70 (.I0(LE), 
                .I1(XLXN_32), 
                .O(d));
   OR2  XLXI_71 (.I0(LE), 
                .I1(XLXN_31), 
                .O(c));
   OR2  XLXI_72 (.I0(LE), 
                .I1(XLXN_29), 
                .O(a));
   OR2  XLXI_73 (.I0(LE), 
                .I1(XLXN_30), 
                .O(b));
   INV  XLXI_152 (.I(D3), 
                 .O(XLXN_148));
   INV  XLXI_153 (.I(D2), 
                 .O(XLXN_145));
   INV  XLXI_154 (.I(D1), 
                 .O(XLXN_142));
   INV  XLXI_155 (.I(D0), 
                 .O(XLXN_42));
   INV  XLXI_258 (.I(point), 
                 .O(P));
endmodule
`timescale 1ns / 1ps

module MUX4T1_4_sch_MUSER_Framework(I0, 
                                    I1, 
                                    I2, 
                                    I3, 
                                    s, 
                                    o);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] o;
   
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_16;
   wire XLXN_18;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_61;
   wire XLXN_63;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_16));
   INV  XLXI_3 (.I(s[0]), 
               .O(XLXN_18));
   AND2  XLXI_4 (.I0(XLXN_18), 
                .I1(XLXN_16), 
                .O(XLXN_63));
   AND2  XLXI_5 (.I0(s[0]), 
                .I1(XLXN_16), 
                .O(XLXN_61));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(XLXN_18), 
                .O(XLXN_58));
   AND2  XLXI_7 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_57));
   AND2  XLXI_8 (.I0(I0[0]), 
                .I1(XLXN_63), 
                .O(XLXN_7));
   AND2  XLXI_9 (.I0(I1[0]), 
                .I1(XLXN_61), 
                .O(XLXN_8));
   AND2  XLXI_10 (.I0(I2[0]), 
                 .I1(XLXN_58), 
                 .O(XLXN_9));
   AND2  XLXI_11 (.I0(I3[0]), 
                 .I1(XLXN_57), 
                 .O(XLXN_10));
   OR4  XLXI_12 (.I0(XLXN_10), 
                .I1(XLXN_9), 
                .I2(XLXN_8), 
                .I3(XLXN_7), 
                .O(o[0]));
   AND2  XLXI_28 (.I0(I0[1]), 
                 .I1(XLXN_63), 
                 .O(XLXN_41));
   AND2  XLXI_29 (.I0(I1[1]), 
                 .I1(XLXN_61), 
                 .O(XLXN_42));
   AND2  XLXI_30 (.I0(I2[1]), 
                 .I1(XLXN_58), 
                 .O(XLXN_43));
   AND2  XLXI_31 (.I0(I3[1]), 
                 .I1(XLXN_57), 
                 .O(XLXN_44));
   OR4  XLXI_32 (.I0(XLXN_44), 
                .I1(XLXN_43), 
                .I2(XLXN_42), 
                .I3(XLXN_41), 
                .O(o[1]));
   AND2  XLXI_33 (.I0(I0[2]), 
                 .I1(XLXN_63), 
                 .O(XLXN_46));
   AND2  XLXI_34 (.I0(I1[2]), 
                 .I1(XLXN_61), 
                 .O(XLXN_47));
   AND2  XLXI_35 (.I0(I2[2]), 
                 .I1(XLXN_58), 
                 .O(XLXN_48));
   AND2  XLXI_36 (.I0(I3[2]), 
                 .I1(XLXN_57), 
                 .O(XLXN_49));
   OR4  XLXI_37 (.I0(XLXN_49), 
                .I1(XLXN_48), 
                .I2(XLXN_47), 
                .I3(XLXN_46), 
                .O(o[2]));
   AND2  XLXI_38 (.I0(I0[3]), 
                 .I1(XLXN_63), 
                 .O(XLXN_51));
   AND2  XLXI_39 (.I0(I1[3]), 
                 .I1(XLXN_61), 
                 .O(XLXN_52));
   AND2  XLXI_40 (.I0(I2[3]), 
                 .I1(XLXN_58), 
                 .O(XLXN_53));
   AND2  XLXI_41 (.I0(I3[3]), 
                 .I1(XLXN_57), 
                 .O(XLXN_54));
   OR4  XLXI_42 (.I0(XLXN_54), 
                .I1(XLXN_53), 
                .I2(XLXN_52), 
                .I3(XLXN_51), 
                .O(o[3]));
endmodule
`timescale 1ns / 1ps

module MUX8T1_8_sch_MUSER_Framework(I0, 
                                    I1, 
                                    I2, 
                                    I3, 
                                    I4, 
                                    I5, 
                                    I6, 
                                    I7, 
                                    s, 
                                    o);

    input [7:0] I0;
    input [7:0] I1;
    input [7:0] I2;
    input [7:0] I3;
    input [7:0] I4;
    input [7:0] I5;
    input [7:0] I6;
    input [7:0] I7;
    input [2:0] s;
   output [7:0] o;
   
   wire [3:0] o0;
   wire [3:0] o1;
   wire [3:0] o2;
   wire [3:0] o3;
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_29;
   
   AND2  XLXI_15 (.I0(o0[0]), 
                 .I1(XLXN_29), 
                 .O(XLXN_1));
   AND2  XLXI_16 (.I0(o1[0]), 
                 .I1(s[2]), 
                 .O(XLXN_2));
   AND2  XLXI_17 (.I0(o0[1]), 
                 .I1(XLXN_29), 
                 .O(XLXN_3));
   AND2  XLXI_18 (.I0(o1[1]), 
                 .I1(s[2]), 
                 .O(XLXN_4));
   AND2  XLXI_19 (.I0(o0[2]), 
                 .I1(XLXN_29), 
                 .O(XLXN_7));
   AND2  XLXI_20 (.I0(o1[2]), 
                 .I1(s[2]), 
                 .O(XLXN_6));
   AND2  XLXI_21 (.I0(o0[3]), 
                 .I1(XLXN_29), 
                 .O(XLXN_8));
   AND2  XLXI_22 (.I0(o1[3]), 
                 .I1(s[2]), 
                 .O(XLXN_9));
   AND2  XLXI_23 (.I0(o2[0]), 
                 .I1(XLXN_29), 
                 .O(XLXN_10));
   AND2  XLXI_24 (.I0(o3[0]), 
                 .I1(s[2]), 
                 .O(XLXN_11));
   AND2  XLXI_25 (.I0(o2[1]), 
                 .I1(XLXN_29), 
                 .O(XLXN_12));
   AND2  XLXI_26 (.I0(o3[1]), 
                 .I1(s[2]), 
                 .O(XLXN_13));
   AND2  XLXI_29 (.I0(o2[2]), 
                 .I1(XLXN_29), 
                 .O(XLXN_14));
   AND2  XLXI_30 (.I0(o3[2]), 
                 .I1(s[2]), 
                 .O(XLXN_15));
   AND2  XLXI_31 (.I0(o2[3]), 
                 .I1(XLXN_29), 
                 .O(XLXN_16));
   AND2  XLXI_32 (.I0(o3[3]), 
                 .I1(s[2]), 
                 .O(XLXN_17));
   OR2  XLXI_33 (.I0(XLXN_2), 
                .I1(XLXN_1), 
                .O(o[0]));
   OR2  XLXI_34 (.I0(XLXN_4), 
                .I1(XLXN_3), 
                .O(o[1]));
   OR2  XLXI_35 (.I0(XLXN_6), 
                .I1(XLXN_7), 
                .O(o[2]));
   OR2  XLXI_37 (.I0(XLXN_9), 
                .I1(XLXN_8), 
                .O(o[3]));
   OR2  XLXI_38 (.I0(XLXN_11), 
                .I1(XLXN_10), 
                .O(o[4]));
   OR2  XLXI_39 (.I0(XLXN_13), 
                .I1(XLXN_12), 
                .O(o[5]));
   OR2  XLXI_40 (.I0(XLXN_15), 
                .I1(XLXN_14), 
                .O(o[6]));
   OR2  XLXI_41 (.I0(XLXN_17), 
                .I1(XLXN_16), 
                .O(o[7]));
   MUX4T1_4_sch_MUSER_Framework  XLXI_42 (.I0(I0[3:0]), 
                                         .I1(I1[3:0]), 
                                         .I2(I2[3:0]), 
                                         .I3(I3[3:0]), 
                                         .s(s[1:0]), 
                                         .o(o0[3:0]));
   MUX4T1_4_sch_MUSER_Framework  XLXI_43 (.I0(I4[3:0]), 
                                         .I1(I5[3:0]), 
                                         .I2(I6[3:0]), 
                                         .I3(I7[3:0]), 
                                         .s(s[1:0]), 
                                         .o(o1[3:0]));
   MUX4T1_4_sch_MUSER_Framework  XLXI_44 (.I0(I0[7:4]), 
                                         .I1(I1[7:4]), 
                                         .I2(I2[7:4]), 
                                         .I3(I3[7:4]), 
                                         .s(s[1:0]), 
                                         .o(o2[3:0]));
   MUX4T1_4_sch_MUSER_Framework  XLXI_45 (.I0(I4[7:4]), 
                                         .I1(I5[7:4]), 
                                         .I2(I6[7:4]), 
                                         .I3(I7[7:4]), 
                                         .s(s[1:0]), 
                                         .o(o3[3:0]));
   INV  XLXI_46 (.I(s[2]), 
                .O(XLXN_29));
endmodule
`timescale 1ns / 1ps

module ScanSync_MUSER_Framework(Hexs, 
                                LES, 
                                point, 
                                Scan, 
                                AN, 
                                Hexo, 
                                LE, 
                                p);

    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
   output [3:0] AN;
   output [3:0] Hexo;
   output LE;
   output p;
   
   wire [7:0] COM;
   wire G0;
   wire [7:0] Hex;
   wire V5;
   
   MUX8T1_8_sch_MUSER_Framework  XLXI_1 (.I0({Hexs[3:0], G0, G0, G0, G0}), 
                                        .I1({Hexs[7:4], G0, G0, G0, G0}), 
                                        .I2({Hexs[11:8], G0, G0, G0, G0}), 
                                        .I3({Hexs[15:12], G0, G0, G0, G0}), 
                                        .I4({Hexs[19:16], G0, G0, G0, G0}), 
                                        .I5({Hexs[23:20], G0, G0, G0, G0}), 
                                        .I6({Hexs[27:24], G0, G0, G0, G0}), 
                                        .I7({Hexs[31:28], G0, G0, G0, G0}), 
                                        .s(Scan[2:0]), 
                                        .o(Hex[7:0]));
   MUX8T1_8_sch_MUSER_Framework  XLXI_2 (.I0({LES[0], point[0], G0, G0, V5, V5, 
         V5, G0}), 
                                        .I1({LES[1], point[1], G0, G0, V5, V5, 
         G0, V5}), 
                                        .I2({LES[2], point[2], G0, G0, V5, G0, 
         V5, V5}), 
                                        .I3({LES[3], point[3], G0, G0, G0, V5, 
         V5, V5}), 
                                        .I4({LES[4], point[4], G0, G0, V5, V5, 
         V5, G0}), 
                                        .I5({LES[5], point[5], G0, G0, V5, V5, 
         G0, V5}), 
                                        .I6({LES[6], point[6], G0, G0, V5, G0, 
         V5, V5}), 
                                        .I7({LES[7], point[7], G0, G0, G0, V5, 
         V5, V5}), 
                                        .s(Scan[2:0]), 
                                        .o(COM[7:0]));
   VCC  XLXI_3 (.P(V5));
   GND  XLXI_4 (.G(G0));
   BUF  XLXI_6 (.I(Hex[7]), 
               .O(Hexo[3]));
   BUF  XLXI_7 (.I(Hex[6]), 
               .O(Hexo[2]));
   BUF  XLXI_8 (.I(Hex[5]), 
               .O(Hexo[1]));
   BUF  XLXI_9 (.I(Hex[4]), 
               .O(Hexo[0]));
   BUF  XLXI_10 (.I(COM[3]), 
                .O(AN[3]));
   BUF  XLXI_11 (.I(COM[2]), 
                .O(AN[2]));
   BUF  XLXI_12 (.I(COM[1]), 
                .O(AN[1]));
   BUF  XLXI_13 (.I(COM[0]), 
                .O(AN[0]));
   BUF  XLXI_14 (.I(COM[7]), 
                .O(LE));
   BUF  XLXI_15 (.I(COM[6]), 
                .O(p));
endmodule
`timescale 1ns / 1ps

module Seg7_Dev_MUSER_Framework(flash, 
                                Hexs, 
                                LES, 
                                point, 
                                Scan, 
                                SW0, 
                                AN, 
                                SEGMENT);

    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
    input SW0;
   output [3:0] AN;
   output [7:0] SEGMENT;
   
   wire [3:0] Hex;
   wire [7:0] SEG_TXT;
   wire [7:0] XLXN_8;
   wire XLXN_9;
   wire XLXN_12;
   wire XLXN_13;
   
   ScanSync_MUSER_Framework  XLXI_1 (.Hexs(Hexs[31:0]), 
                                    .LES(LES[7:0]), 
                                    .point(point[7:0]), 
                                    .Scan(Scan[2:0]), 
                                    .AN(AN[3:0]), 
                                    .Hexo(Hex[3:0]), 
                                    .LE(XLXN_12), 
                                    .p(XLXN_9));
   Seg_map  XLXI_2 (.Hexs(Hexs[31:0]), 
                   .Scan(Scan[2:0]), 
                   .Seg_map(XLXN_8[7:0]));
   MUX2T1_8  XLXI_3 (.a(XLXN_8[7:0]), 
                    .b(SEG_TXT[7:0]), 
                    .s(SW0), 
                    .o(SEGMENT[7:0]));
   MC14495_MUSER_Framework  XLXI_4 (.D0(Hex[0]), 
                                   .D1(Hex[1]), 
                                   .D2(Hex[2]), 
                                   .D3(Hex[3]), 
                                   .LE(XLXN_13), 
                                   .point(XLXN_9), 
                                   .a(SEG_TXT[0]), 
                                   .b(SEG_TXT[1]), 
                                   .c(SEG_TXT[2]), 
                                   .d(SEG_TXT[3]), 
                                   .e(SEG_TXT[4]), 
                                   .f(SEG_TXT[5]), 
                                   .g(SEG_TXT[6]), 
                                   .P(SEG_TXT[7]));
   AND2  XLXI_5 (.I0(XLXN_12), 
                .I1(flash), 
                .O(XLXN_13));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_Framework(clk, 
                               flash, 
                               Hexs, 
                               LES, 
                               point, 
                               rst, 
                               Start, 
                               SW0, 
                               seg_clk, 
                               seg_clrn, 
                               SEG_PEN, 
                               seg_sout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
    input SW0;
   output seg_clk;
   output seg_clrn;
   output SEG_PEN;
   output seg_sout;
   
   wire [63:0] XLXN_1;
   wire [63:0] XLXN_2;
   wire [63:0] XLXN_8;
   
   HexTo8SEG  XLXI_1 (.flash(flash), 
                     .Hexs(Hexs[31:0]), 
                     .LES(LES[7:0]), 
                     .points(point[7:0]), 
                     .SEG_TXT(XLXN_1[63:0]));
   SSeg_map  XLXI_2 (.Disp_num({Hexs[31:0], Hexs[31:0]}), 
                    .Seg_map(XLXN_2[63:0]));
   MUX2T1_64  XLXI_3 (.a(XLXN_1[63:0]), 
                     .b(XLXN_2[63:0]), 
                     .s(SW0), 
                     .o(XLXN_8[63:0]));
   P2S  XLXI_4 (.clk(clk), 
               .P_Data(XLXN_8[63:0]), 
               .rst(rst), 
               .Serial(Start), 
               .EN(SEG_PEN), 
               .sout(seg_sout), 
               .s_clk(seg_clk), 
               .s_clrn(seg_clrn));
endmodule
`timescale 1ns / 1ps

module Framework(clk_100mhz, 
                 K_COL, 
                 PS2_clk, 
                 PS2_data, 
                 RSTN, 
                 SW, 
                 AN, 
                 b, 
                 Buzzer, 
                 CR, 
                 g, 
                 hs, 
                 K_ROW, 
                 LED, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 r, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN, 
                 SEGMENT, 
                 vs);

    input clk_100mhz;
    input [3:0] K_COL;
    input PS2_clk;
    input PS2_data;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output [3:0] b;
   output Buzzer;
   output CR;
   output [3:0] g;
   output hs;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output [3:0] r;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   output vs;
   
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire [9:0] data;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire G0;
   wire [7:0] LED_out;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire [63:0] s_point;
   wire [31:0] timer;
   wire V5;
   wire [4:0] XLXN_18;
   wire [31:0] XLXN_31;
   wire [7:0] XLXN_32;
   wire [7:0] XLXN_33;
   wire [31:0] XLXN_46;
   wire [31:0] XLXN_47;
   wire [31:0] XLXN_48;
   wire [11:0] XLXN_62;
   wire [8:0] XLXN_67;
   wire [9:0] XLXN_68;
   wire XLXN_69;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   wire vs_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   assign vs = vs_DUMMY;
   SAnti_jitter  XLXI_1 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_18[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(rst), 
                        .SW_OK(SW_OK[15:0]));
   clkdiv  XLXI_2 (.clk(clk_100mhz), 
                  .rst(rst), 
                  .clkdiv(Div[31:0]));
   SEnter_2_32  XLXI_3 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_18[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   Display_MUSER_Framework  XLXI_4 (.clk(clk_100mhz), 
                                   .flash(Div[25]), 
                                   .Hexs(XLXN_31[31:0]), 
                                   .LES(XLXN_33[7:0]), 
                                   .point(XLXN_32[7:0]), 
                                   .rst(rst), 
                                   .Start(Div[20]), 
                                   .SW0(SW_OK[0]), 
                                   .seg_clk(SEGCLK), 
                                   .seg_clrn(SEGCLR), 
                                   .SEG_PEN(SEGEN), 
                                   .seg_sout(SEGDT));
   Multi_8CH32  XLXI_5 (.clk(clk_100mhz), 
                       .Data0(Ai[31:0]), 
                       .data1(Bi[31:0]), 
                       .data2(Div[31:0]), 
                       .data3(timer[31:0]), 
                       .data4(XLXN_46[31:0]), 
                       .data5(XLXN_47[31:0]), 
                       .data6(XLXN_48[31:0]), 
                       .data7({G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, data[9:0]}), 
                       .EN(V5), 
                       .LES({G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         blink[3:0], G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, blink[7:0], blink[7:0]}), 
                       .point_in(s_point[63:0]), 
                       .rst(rst), 
                       .Test(SW_OK[7:5]), 
                       .Disp_num(XLXN_31[31:0]), 
                       .LE_out(XLXN_33[7:0]), 
                       .point_out(XLXN_32[7:0]));
   VCC  XLXI_6 (.P(V5));
   GND  XLXI_7 (.G(G0));
   GPIO  XLXI_8 (.clk(clk_100mhz), 
                .EN(V5), 
                .P_Data({SW[15:0], SW_OK[15:0]}), 
                .rst(rst), 
                .Start(Div[20]), 
                .GPIOf0(), 
                .led_clk(LEDCLK), 
                .led_clrn(LEDCLR), 
                .LED_PEN(LEDEN), 
                .led_sout(LEDDT));
   Seg7_Dev_MUSER_Framework  XLXI_9 (.flash(Div[25]), 
                                    .Hexs(Disp_num[31:0]), 
                                    .LES(LED_out[7:0]), 
                                    .point(point_out[7:0]), 
                                    .Scan({SW_OK[1], Div[19:18]}), 
                                    .SW0(SW_OK[0]), 
                                    .AN(AN[3:0]), 
                                    .SEGMENT(SEGMENT[7:0]));
   PIO  XLXI_10 (.clk(clk_100mhz), 
                .EN(V5), 
                .PData_in({SW[15:0], SW_OK[15:0]}), 
                .rst(G0), 
                .GPIOf0(), 
                .LED(LED[7:0]));
   BUF  XLXI_11 (.I(V5), 
                .O(Buzzer));
   ps2_ver2  XLXI_12 (.clk(clk_100mhz), 
                     .ps2_clk(PS2_clk), 
                     .ps2_data(PS2_data), 
                     .rst(), 
                     .data_out(data[9:0]), 
                     .ready());
   vgac  XLXI_15 (.clrn(SW_OK[12]), 
                 .d_in(XLXN_62[11:0]), 
                 .vga_clk(Div[1]), 
                 .b(b[3:0]), 
                 .col_addr(XLXN_68[9:0]), 
                 .g(g[3:0]), 
                 .hs(hs), 
                 .r(r[3:0]), 
                 .rdn(), 
                 .row_addr(XLXN_67[8:0]), 
                 .vs(vs_DUMMY));
   Wall_Clock  XLXI_17 (.clk(Div[0]), 
                       .reset(BTN_OK[0]), 
                       .stop(XLXN_69), 
                       .s_point(s_point[3:0]), 
                       .Time_out(timer[15:0]));
   Main  XLXI_20 (.clk(Div[1]), 
                 .keyboard(data[9:0]), 
                 .reset(BTN_OK[0]), 
                 .vs(vs_DUMMY), 
                 .x(XLXN_68[9:0]), 
                 .y(XLXN_67[8:0]), 
                 .RGB(XLXN_62[11:0]), 
                 .stop(XLXN_69));
endmodule
